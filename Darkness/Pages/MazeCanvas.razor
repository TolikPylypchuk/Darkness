@inject ISettingsService SettingsService
@inject IMazeGenerator MazeGenerator
@inject IJSRuntime JSRuntime

<div class="d-flex flex-column align-self-stretch w-100">
    <div class="pa-4 w-100">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.ArrowBack"
                   @onclick="this.BackToMainMenu">
            Go Back
        </MudButton>
    </div>

    <div class="d-flex flex-column justify-center align-center align-self-stretch flex-grow-1 w-100">
        @if (this.IsLoaded)
        {
            <Canvas @ref="this.Canvas" class="d-flex flex-grow-1 align-self-stretch">
                It seems that you're using an old browser and the game won't work on it :(
            </Canvas>
        } else
        {
            <div class="d-flex flex-column align-self-stretch justify-center w-100">
                <div class="d-flex flex-column align-self-center">
                    <MudText Typo="Typo.h3" Class="ma-4">Creating the maze...</MudText>
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="ma-4" />
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnBackToMainMenuCallback { get; set; }

    private Canvas? Canvas { get; set; }

    private RenderFragment CellFragment =>
        @<MudPaper Elevation="0" Outlined="true" Square="true" />;

    private bool IsLoaded { get; set; } = false;
    private CancellationTokenSource MazeGenerationTokenSource { get; set; } = new();

    private GameMaze Maze { get; set; } = null!;
    private Cell CurrentCell { get; set; } = null!;
    private PlayerDirection CurrentDirection { get; set; } = PlayerDirection.Right;

    private HashSet<Cell> VisibleCells { get; } = new();
    private HashSet<Cell> PartiallyVisibleCells { get; } = new();

    public void CancelIfGeneratingMaze()
    {
        this.MazeGenerationTokenSource.Cancel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var settings = await this.SettingsService.GetSettings();

            this.StateHasChanged();

            try
            {
                this.Maze = await this.MazeGenerator.CreateMaze(settings, this.MazeGenerationTokenSource.Token);
                this.CurrentCell = this.Maze.Start;

                this.RecalculateVisiblities();

                this.IsLoaded = true;
                this.StateHasChanged();
            } catch (TaskCanceledException)
            { }
        }
    }

    private async Task BackToMainMenu()
    {
        this.CancelIfGeneratingMaze();
        await this.OnBackToMainMenuCallback.InvokeAsync();
    }

    private void RecalculateVisiblities()
    {
        this.VisibleCells.Clear();
        this.PartiallyVisibleCells.Clear();

        var currentCell = this.CurrentCell;

        do
        {
            this.VisibleCells.Add(currentCell);

            var (cell1, cell2) = this.Maze.GetOrthogonalCells(currentCell, this.CurrentDirection);
            this.PartiallyVisibleCells.AddIfNotNull(cell1);
            this.PartiallyVisibleCells.AddIfNotNull(cell2);

            currentCell = this.Maze.GetNextCell(currentCell, this.CurrentDirection);
        } while (currentCell != null);
    }
}
