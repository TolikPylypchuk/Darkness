<div class="maze-container">
    <div class="maze" style="@this.MazeStyle">
        @foreach (var cell in this.VisibleCells)
        {
            <MazeCell Cell="cell" IsPartial="false" RenderWalls="true"
                  Direction="Equals(cell, this.CurrentCell) ? this.CurrentDirection : null"
                  IsStart="Equals(cell, this.Maze.Start)" IsFinish="Equals(cell, this.Maze.Finish)" />
        }

        @foreach (var cell in this.PartiallyVisibleCells)
        {
            <MazeCell Cell="cell" IsPartial="true" Direction="null" IsStart="false" IsFinish="false"
                      RenderWalls="false" />
        }

        @foreach (var (cell, delay) in this.AnimatingCells)
        {
            <MazeCell Cell="cell" IsPartial="false" Direction="null" RenderWalls="true" AnimationDelay="delay"
                      IsStart="Equals(cell, this.Maze.Start)" IsFinish="false" />
        }

        @if (this.Settings.AlwaysShowFinish && !this.VisibleCells.Contains(this.Maze.Finish))
        {
            <MazeCell Cell="this.Maze.Finish" IsPartial="false" Direction="null" RenderWalls="false"
                      IsStart="false" IsFinish="true" />
        }
    </div>
</div>

<div class="maze-controls">
    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Up)" DisableElevation="true"
               DisableRipple="true" aria-label="Up">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="@Size.Large" />
    </MudButton>

    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Down)" DisableElevation="true"
               DisableRipple="true" aria-label="Down">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="@Size.Large" />
    </MudButton>

    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Left)" DisableElevation="true"
               DisableRipple="true" aria-label="Left">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowLeft" Size="@Size.Large" />
    </MudButton>

    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Right)" DisableElevation="true"
               DisableRipple="true" aria-label="Right">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Size="@Size.Large" />
    </MudButton>
</div>
