<div style=@($"aspect-ratio: {this.MazeWidth} / {this.MazeHeight}; background-color: {Colors.Grey.Darken4}")
     class="maze-wrapper">
    @foreach (var cell in this.VisibleCells)
    {
        <MazeCell Cell="cell" Width="this.CellWidth" Height="this.CellHeight" IsPartial="false"
                  Direction="Equals(cell, this.CurrentCell) ? this.CurrentDirection : null"
                  IsStart="Equals(cell, this.Maze.Start)" IsFinish="Equals(cell, this.Maze.Finish)"
                  RenderWalls="true" />
    }

    @foreach (var cell in this.PartiallyVisibleCells)
    {
        <MazeCell Cell="cell" Width="this.CellWidth" Height="this.CellHeight" IsPartial="true"
                  Direction="null" IsStart="false" IsFinish="false" RenderWalls="false" />
    }

    @foreach (var (cell, delay) in this.AnimatingCells)
    {
        <MazeCell Cell="cell" Width="this.CellWidth" Height="this.CellHeight" IsPartial="false" Direction="null"
                  IsStart="Equals(cell, this.Maze.Start)" IsFinish="false" RenderWalls="true" AnimationDelay="delay" />
    }

    @if (this.Settings.AlwaysShowFinish && !this.VisibleCells.Contains(this.Maze.Finish))
    {
        <MazeCell Cell="this.Maze.Finish" Width="this.CellWidth" Height="this.CellHeight" IsPartial="false"
                  Direction="null" IsStart="false" IsFinish="true" RenderWalls="false" />
    }
</div>

<div class="maze-controls d-flex mb-1">
    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Up)" DisableElevation="true"
               DisableRipple="true" aria-label="Up">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="@Size.Large" />
    </MudButton>

    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Down)" DisableElevation="true"
               DisableRipple="true" aria-label="Down">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="@Size.Large" />
    </MudButton>

    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Left)" DisableElevation="true"
               DisableRipple="true" aria-label="Left">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowLeft" Size="@Size.Large" />
    </MudButton>

    <MudButton Variant="@Variant.Text" OnClick="() => this.Move(PlayerDirection.Right)" DisableElevation="true"
               DisableRipple="true" aria-label="Right">
        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Size="@Size.Large" />
    </MudButton>
</div>
