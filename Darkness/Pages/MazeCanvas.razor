<div style=@($"max-width: {this.MazeWidth}vh; height: {this.MazeHeight}vw; background-color: {Colors.Grey.Darken4}")
     class="maze-wrapper">
    @foreach (var cell in this.VisibleCells)
    {
        <MazeCell Cell="cell" Width="this.CellWidth" Height="this.CellHeight" IsPartial="false"
                  Direction="Equals(cell, this.CurrentCell) ? this.CurrentDirection : null"
                  IsStart="Equals(cell, this.Maze.Start)" IsFinish="Equals(cell, this.Maze.Finish)"
                  RenderWalls="true" />
    }

    @foreach (var cell in this.PartiallyVisibleCells)
    {
        <MazeCell Cell="cell" Width="this.CellWidth" Height="this.CellHeight" IsPartial="true"
                  Direction="null" IsStart="false" IsFinish="false" RenderWalls="false" />
    }

    @foreach (var (cell, delay) in this.AnimatingCells)
    {
        <MazeCell Cell="cell" Width="this.CellWidth" Height="this.CellHeight" IsPartial="false" Direction="null"
                  IsStart="Equals(cell, this.Maze.Start)" IsFinish="false" RenderWalls="true" AnimationDelay="delay" />
    }

    @if (this.Settings.AlwaysShowFinish && !this.VisibleCells.Contains(this.Maze.Finish))
    {
        <MazeCell Cell="this.Maze.Finish" Width="this.CellWidth" Height="this.CellHeight" IsPartial="false"
                  Direction="null" IsStart="false" IsFinish="true" RenderWalls="false" />
    }

    <div class="d-flex flex-column w-100 h-100">
        <div class="d-flex flex-row align-center justify-center w-100 h-30 front">
            <div class="w-50 h-100" @onmouseup="() => this.Move(PlayerDirection.Up)"></div>
        </div>

        <div class="d-flex flex-row align-center justify-space-between h-40 front">
            <div class="w-25 h-100" @onmouseup="() => this.Move(PlayerDirection.Left)"></div>
            <div class="w-25 h-100" @onmouseup="() => this.Move(PlayerDirection.Right)"></div>
        </div>

        <div class="d-flex flex-row align-center justify-center h-30 front">
            <div class="w-50 h-100" @onmouseup="() => this.Move(PlayerDirection.Down)"></div>
        </div>
    </div>
</div>
