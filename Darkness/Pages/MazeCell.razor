@using System.Text

<MudPaper Elevation="0" Square="true" Class="@this.CellPaperClass" Style="@this.CellPaperStyle">
    @if (this.Icon != null)
    {
        <MudIcon Icon="@this.Icon" Color="Color.Primary"
                 Style="width: 90%; height: 90%; top: 5%; left: 5%; position: absolute" />
    }

    @if (this.RenderWalls)
    {
        <div class="cell-corner-top cell-corner-left" style="@this.WallStyle"></div>
        <div class="cell-corner-top cell-corner-right" style="@this.WallStyle"></div>
        <div class="cell-corner-bottom cell-corner-left" style="@this.WallStyle"></div>
        <div class="cell-corner-bottom cell-corner-right" style="@this.WallStyle"></div>

        if (!this.Cell.Top.IsOpen())
        {
            <div class="cell-wall-top" style="@this.WallStyle"></div>
        }

        if (!this.Cell.Bottom.IsOpen())
        {
            <div class="cell-wall-bottom" style="@this.WallStyle"></div>
        }

        if (!this.Cell.Left.IsOpen())
        {
            <div class="cell-wall-left" style="@this.WallStyle"></div>
        }

        if (!this.Cell.Right.IsOpen())
        {
            <div class="cell-wall-right" style="@this.WallStyle"></div>
        }
    }
</MudPaper>

@code {

    [Parameter]
    public Cell Cell { get; set; } = null!;

    [Parameter]
    public double Width { get; set; }

    [Parameter]
    public double Height { get; set; }

    [Parameter]
    public bool IsPartial { get; set; }

    [Parameter]
    public PlayerDirection? Direction { get; set; }

    [Parameter]
    public bool IsStart { get; set; }

    [Parameter]
    public bool IsFinish { get; set; }

    [Parameter]
    public bool RenderWalls { get; set; }

    [Parameter]
    public double? AnimationDelay { get; set; }

    private string CellPaperClass { get; set; } = String.Empty;
    private string CellPaperStyle { get; set; } = String.Empty;

    private double X { get; set; }
    private double Y { get; set; }

    private string? Icon { get; set; }

    private string WallStyle { get; } = $"background-color: {Colors.Grey.Darken3}";

    private string BackgroundColor { get; set; } = String.Empty;

    public void AnimateAppearance(double delay)
    {
        this.CellPaperStyle += $" animation-delay: {delay}s;";
        this.CellPaperClass += $" animating";
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.X = this.Cell.Location.Column * this.Width;
        this.Y = this.Cell.Location.Row * this.Height;

        this.Icon = this.Direction switch
        {
            PlayerDirection.Left => Icons.Material.Filled.KeyboardArrowLeft,
            PlayerDirection.Right => Icons.Material.Filled.KeyboardArrowRight,
            PlayerDirection.Up => Icons.Material.Filled.KeyboardArrowUp,
            PlayerDirection.Down => Icons.Material.Filled.KeyboardArrowDown,
            _ => null
        };

        this.BackgroundColor = this.IsStart
            ? Colors.Pink.Lighten1
            : this.IsFinish ? Colors.DeepPurple.Lighten1 : Colors.Grey.Lighten2;

        this.CellPaperClass = this.BuildClass();
        this.CellPaperStyle = this.BuildStyle();
    }

    private string BuildClass()
    {
        const string space = " ";

        var classBuilder = new StringBuilder()
            .Append(this.IsPartial ? "maze-cell-partial" : "maze-cell")
            .Append(space)
            .Append("back");

        if (this.AnimationDelay.HasValue)
        {
            classBuilder.Append(space).Append("animating");
        }

        return classBuilder.ToString();
    }

    private string BuildStyle()
    {
        const string space = " ";

        var styleBuilder = new StringBuilder()
            .Append($"left: {this.X}%;")
            .Append(space)
            .Append($"top: {this.Y}%;")
            .Append(space)
            .Append($"width: {this.Width}%;")
            .Append(space)
            .Append($"height: {this.Height}%;")
            .Append(space)
            .Append($"background-color: {this.BackgroundColor};");

        if (this.AnimationDelay.HasValue)
        {
            styleBuilder.Append(space).Append($"animation-delay: {Math.Round(this.AnimationDelay.Value, 2)}s;");
        }

        return styleBuilder.ToString();
    }
}
