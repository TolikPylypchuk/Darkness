<MudPaper Elevation="0" Square="true" Class=@((this.IsPartial ? "maze-cell-partial" : "maze-cell") + " back")
          Style=@($"left: {this.X}%; top: {this.Y}%; width: {this.Width}%; height: {this.Height}%; " +
                  $"background-color: {this.BackgroundColor}")>
    @if (this.Icon != null)
    {
        <MudIcon Icon="@this.Icon" Color="Color.Primary"
                 Style="width: 90%; height: 90%; top: 5%; left: 5%; position: absolute" />
    }

    @if (this.RenderWalls)
    {
        <div class="cell-corner-top cell-corner-left" style="@this.WallStyle"></div>
        <div class="cell-corner-top cell-corner-right" style="@this.WallStyle"></div>
        <div class="cell-corner-bottom cell-corner-left" style="@this.WallStyle"></div>
        <div class="cell-corner-bottom cell-corner-right" style="@this.WallStyle"></div>

        if (!this.Cell.Top.IsOpen())
        {
            <div class="cell-wall-top" style="@this.WallStyle"></div>
        }

        if (!this.Cell.Bottom.IsOpen())
        {
            <div class="cell-wall-bottom" style="@this.WallStyle"></div>
        }

        if (!this.Cell.Left.IsOpen())
        {
            <div class="cell-wall-left" style="@this.WallStyle"></div>
        }

        if (!this.Cell.Right.IsOpen())
        {
            <div class="cell-wall-right" style="@this.WallStyle"></div>
        }
    }
</MudPaper>

@code {
    [Parameter]
    public Cell Cell { get; set; } = null!;

    [Parameter]
    public double Width { get; set; }

    [Parameter]
    public double Height { get; set; }

    [Parameter]
    public bool IsPartial { get; set; }

    [Parameter]
    public PlayerDirection? Direction { get; set; }

    [Parameter]
    public bool IsStart { get; set; }

    [Parameter]
    public bool IsFinish { get; set; }

    [Parameter]
    public bool RenderWalls { get; set; }

    private double X { get; set; }
    private double Y { get; set; }

    private string? Icon { get; set; }

    private string WallStyle { get; } = $"background-color: {Colors.Grey.Darken3}";

    private string BackgroundColor { get; set; } = String.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.X = this.Cell.Location.Column * this.Width;
        this.Y = this.Cell.Location.Row * this.Height;

        this.Icon = this.Direction switch
        {
            PlayerDirection.Left => Icons.Material.Filled.KeyboardArrowLeft,
            PlayerDirection.Right => Icons.Material.Filled.KeyboardArrowRight,
            PlayerDirection.Up => Icons.Material.Filled.KeyboardArrowUp,
            PlayerDirection.Down => Icons.Material.Filled.KeyboardArrowDown,
            _ => null
        };

        this.BackgroundColor = this.IsStart
            ? Colors.Pink.Lighten1
            : this.IsFinish ? Colors.DeepPurple.Lighten1 : Colors.Grey.Lighten2;
    }
}
