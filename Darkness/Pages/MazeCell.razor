<div class="@($"cell{this.CellClass}")" style="@this.CellStyle">
    @if (this.Icon != null)
    {
        <div class="middle center">
            <MudIcon Icon="@this.Icon" Color="Color.Primary" Class="icon" />
        </div>
    }

    @if (this.RenderWalls)
    {
        <div class="wall top left"></div>
        <div class="wall top right"></div>
        <div class="wall bottom left"></div>
        <div class="wall bottom right"></div>

        if (!this.Cell.Top.IsOpen())
        {
            <div class="wall top center"></div>
        }

        if (!this.Cell.Bottom.IsOpen())
        {
            <div class="wall bottom center"></div>
        }

        if (!this.Cell.Left.IsOpen())
        {
            <div class="wall middle left"></div>
        }

        if (!this.Cell.Right.IsOpen())
        {
            <div class="wall middle right"></div>
        }
    }
</div>

@code {
    [Parameter]
    public Cell Cell { get; set; } = null!;

    [Parameter]
    public bool IsPartial { get; set; }

    [Parameter]
    public PlayerDirection? Direction { get; set; }

    [Parameter]
    public bool IsStart { get; set; }

    [Parameter]
    public bool IsFinish { get; set; }

    [Parameter]
    public bool RenderWalls { get; set; }

    [Parameter]
    public double? AnimationDelay { get; set; }

    private string CellClass { get; set; } = String.Empty;
    private string CellStyle { get; set; } = String.Empty;

    private string? Icon { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.Icon = this.DirectionToIcon();
        this.CellClass = this.BuildClass();
        this.CellStyle = this.BuildStyle();
    }

    private string? DirectionToIcon() =>
        this.Direction switch
        {
            PlayerDirection.Left => Icons.Material.Filled.KeyboardArrowLeft,
            PlayerDirection.Right => Icons.Material.Filled.KeyboardArrowRight,
            PlayerDirection.Up => Icons.Material.Filled.KeyboardArrowUp,
            PlayerDirection.Down => Icons.Material.Filled.KeyboardArrowDown,
            _ => null
        };

    private string BuildClass() =>
        (this.IsPartial ? " partial" : "") + (this.AnimationDelay.HasValue ? " animating" : "");

    private string BuildStyle()
    {
        var backgroundColor = this.IsStart
            ? "--mud-palette-secondary"
            : this.IsFinish ? "--mud-palette-primary" : "--mud-palette-gray-lighter";

        return $"--row: {this.Cell.Location.Row + 1}; " +
            $"--column: {this.Cell.Location.Column + 1}; " +
            $"--background-color: var({backgroundColor});" +
            (this.AnimationDelay.HasValue ? $" --animation-delay: {Math.Round(this.AnimationDelay.Value, 2)}s;" : "");
    }
}
