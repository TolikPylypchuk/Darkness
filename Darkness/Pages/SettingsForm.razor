@page "/settings"
@page "/settings.html"

@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager

<PageTitle>Settings | Darkness</PageTitle>

<div class="d-flex flex-column justify-center align-center">
    <MudText Typo="Typo.h2" Class="ma-4">Settings</MudText>

    <MudForm>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudSelect T="int" Label="Maze Width" Strict="true" @bind-Value="this.MazeWidth" Class="ma-2">
                    @for (int size = 10; size <= 50; size += 5)
                    {
                        <MudSelectItem T="int" Value="size" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="int" Label="Maze Height" Strict="true" @bind-Value="this.MazeHeight" Class="ma-2">
                    @for (int size = 10; size <= 50; size += 5)
                    {
                        <MudSelectItem T="int" Value="size" />
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox T="bool" Label="Always show the finish tile"
                             @bind-Checked="this.AlwaysShowFinish" Class="ma-2" />
            </MudItem>
        </MudGrid>
    </MudForm>

    <div class="d-flex flex-row justify-space-between my-2 w-100">
        <div class="d-flex flex-row">
            <MudButton Class="my-4 mx-2" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary"
                       @onclick="this.Save">
                Save
            </MudButton>
            <MudButton Class="ma-4" Variant="Variant.Filled" DisableElevation="true" @onclick="this.Cancel">
                Cancel
            </MudButton>
        </div>

        <MudButton Class="my-4 mx-2" Variant="Variant.Filled" DisableElevation="true" @onclick="this.Reset">
            Reset
        </MudButton>
    </div>
</div>

@code {
    private int MazeWidth { get; set; }
    private int MazeHeight { get; set; }
    private bool AlwaysShowFinish { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.InitializeFields(await this.SettingsService.GetSettings());
    }

    private async Task Save()
    {
        await this.SettingsService.SaveSettings(new(this.MazeWidth, this.MazeHeight, this.AlwaysShowFinish));
        this.NavigationManager.NavigateTo("/");
    }

    private void Cancel() =>
        this.NavigationManager.NavigateTo("/");

    private async Task Reset() =>
        this.InitializeFields(await this.SettingsService.GetDefaultSettings());

    private void InitializeFields(GameSettings settings)
    {
        this.MazeWidth = settings.MazeWidth;
        this.MazeHeight = settings.MazeHeight;
        this.AlwaysShowFinish = settings.AlwaysShowFinish;
    }
}
