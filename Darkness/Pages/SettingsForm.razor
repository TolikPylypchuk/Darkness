@page "/settings"
@page "/settings.html"

@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager

<PageTitle>Settings | Darkness</PageTitle>

<div class="container">
    <MudText Typo="Typo.h2" Class="title">Settings</MudText>

    <MudForm Class="settings-form">
        <MudSelect T="int" Label="Maze Width" Strict="true" @bind-Value="this.MazeWidth">
            @for (int size = 10; size <= 50; size += 5)
            {
                <MudSelectItem T="int" Value="size" />
            }
        </MudSelect>
        <MudSelect T="int" Label="Maze Height" Strict="true" @bind-Value="this.MazeHeight">
            @for (int size = 10; size <= 50; size += 5)
            {
                <MudSelectItem T="int" Value="size" />
            }
        </MudSelect>
        <MudCheckBox T="bool" Label="Always show the finish tile" @bind-Checked="this.AlwaysShowFinish"
                     Class="show-finish-checkbox" />
    </MudForm>

    <div class="action-container">
        <div class="main-action-container">
            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary"
                       @onclick="this.Save">
                Save
            </MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" @onclick="this.NavigateToHomePage">
                Cancel
            </MudButton>
        </div>

        <MudButton Variant="Variant.Filled" DisableElevation="true" @onclick="this.Reset">
            Reset
        </MudButton>
    </div>
</div>

@code {
    private int MazeWidth { get; set; }
    private int MazeHeight { get; set; }
    private bool AlwaysShowFinish { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.InitializeFields(await this.SettingsService.GetSettings());
    }

    private async Task Save()
    {
        await this.SettingsService.SaveSettings(new(this.MazeWidth, this.MazeHeight, this.AlwaysShowFinish));
        this.NavigateToHomePage();
    }

    private void NavigateToHomePage() =>
        this.NavigationManager.NavigateTo("/");

    private async Task Reset() =>
        this.InitializeFields(await this.SettingsService.GetDefaultSettings());

    private void InitializeFields(GameSettings settings)
    {
        this.MazeWidth = settings.MazeWidth;
        this.MazeHeight = settings.MazeHeight;
        this.AlwaysShowFinish = settings.AlwaysShowFinish;
    }
}
