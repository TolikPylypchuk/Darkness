@inject IHistoryService<Page> History

<MudThemeProvider Theme="this.DarkTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="d-flex flex-column h-100">
    <main class="flex-grow-1 d-flex justify-center align-center">
        @switch (this.CurrentPage)
        {
            case Page.MainMenu:
                <MainMenu OnPlayCallback="this.OpenMazePage" OnSettingsCallback="this.OpenSettings" />
                break;
            case Page.MazePage:
                <MazePage @ref="this.MazePage" OnBackToMainMenuCallback="this.OpenMainMenu" />
                break;
            case Page.SettingsForm:
                <SettingsForm OnBackToMainMenuCallback="this.OpenMainMenu" />
                break;
        }
    </main>

    @if (this.ShowFooter)
    {
        <Footer />
    }
</div>

@code {
    public enum Page
    {
        MainMenu,
        MazePage,
        SettingsForm
    }

    private Page CurrentPage { get; set; } = Page.MainMenu;

    private MazePage? MazePage { get; set; } = null!;

    private MudTheme DarkTheme { get; } = new()
        {
            Palette = new()
            {
                Black = "#27272F",
                Background = "#32333D",
                BackgroundGrey = "#27272F",
                Surface = "#373740",
                DrawerBackground = "#27272F",
                DrawerText = "rgba(255,255,255, 0.50)",
                DrawerIcon = "rgba(255,255,255, 0.50)",
                AppbarBackground = "#27272F",
                AppbarText = "rgba(255,255,255, 0.70)",
                TextPrimary = "rgba(255,255,255, 0.70)",
                TextSecondary = "rgba(255,255,255, 0.50)",
                ActionDefault = "#ADADB1",
                ActionDisabled = "rgba(255,255,255, 0.26)",
                ActionDisabledBackground = "rgba(255,255,255, 0.12)"
            }
        };

    private string CurrentPageTitle =>
        this.CurrentPage switch
        {
            Page.MainMenu => "Darkness",
            Page.MazePage => "Maze | Darkness",
            Page.SettingsForm => "Settings | Darkness",
            _ => String.Empty
        };

    private bool ShowFooter => this.CurrentPage != Page.MazePage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await this.History.OnPop(page =>
        {
            if (this.CurrentPage == Page.MazePage)
            {
                this.MazePage?.CancelIfGeneratingMaze();
            }

            this.CurrentPage = page;
            this.StateHasChanged();
            return ValueTask.CompletedTask;
        });
    }

    private async Task OpenMainMenu()
    {
        this.CurrentPage = Page.MainMenu;
        await this.History.Back();
    }

    private async Task OpenMazePage()
    {
        this.CurrentPage = Page.MazePage;
        await this.SaveCurrentPage();
    }

    private async Task OpenSettings()
    {
        this.CurrentPage = Page.SettingsForm;
        await this.SaveCurrentPage();
    }

    private ValueTask SaveCurrentPage() =>
        this.History.Push(this.CurrentPage, this.CurrentPageTitle);
}
